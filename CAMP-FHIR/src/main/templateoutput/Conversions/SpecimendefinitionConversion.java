package main.templateoutput.Conversions;
// Generated on Jan 28, 2022, 8:02:40 AM 


import org.hl7.fhir.r4.model.Patient;

/**
 *  object for conversion model class Specimendefinition.
 * @see .Specimendefinition
 * @author Paul Kovach
 */
import main.java.com.campfhir.service.conversion.HapiFHIRHelpers;

public class SpecimendefinitionConversion 
{
	public Patient Specimendefinitions(main.templateoutput.Model.Specimendefinition specimendefinition) 
	{
			Patient  Specimendefinitionobj = new Patient(); 

						Specimendefinitionobj.setIdentifier(HapiFHIRHelpers.createIdentifier(specimendefinition.getSpcmnDfntnDntfrDntfrSe() /** { "tree" :"SpecimenDefinition.identifier", "datatype" : "Identifier, code", "cardinality" : "ZeroOne", "elementtree" : [] , "methodName" : "setIdentifier, setUse"} **/
						, specimendefinition.getSpcmnDfntnDntfrDntfrTpCcCSstm() /** { "tree" :"SpecimenDefinition.identifier", "datatype" : "Identifier, CodeableConcept, Coding, uri", "cardinality" : "ZeroOne", "elementtree" : [] , "methodName" : "setIdentifier, setType, addCoding, setSystem"} **/
						, specimendefinition.getSpcmnDfntnDntfrDntfrTpCcCVrsn() /** { "tree" :"SpecimenDefinition.identifier", "datatype" : "Identifier, CodeableConcept, Coding, string", "cardinality" : "ZeroOne", "elementtree" : [] , "methodName" : "setIdentifier, setType, addCoding, setVersion"} **/
						, specimendefinition.getSpcmnDfntnDntfrDntfrTpCcCCde() /** { "tree" :"SpecimenDefinition.identifier", "datatype" : "Identifier, CodeableConcept, Coding, code", "cardinality" : "ZeroOne", "elementtree" : [] , "methodName" : "setIdentifier, setType, addCoding, setCode"} **/
						, specimendefinition.getSpcmnDfntnDntfrDntfrTpCcCDsplay() /** { "tree" :"SpecimenDefinition.identifier", "datatype" : "Identifier, CodeableConcept, Coding, string", "cardinality" : "ZeroOne", "elementtree" : [] , "methodName" : "setIdentifier, setType, addCoding, setDisplay"} **/
						, specimendefinition.getSpcmnDfntnDntfrDntfrTpCcCSrSlctd() /** { "tree" :"SpecimenDefinition.identifier", "datatype" : "Identifier, CodeableConcept, Coding, boolean", "cardinality" : "ZeroOne", "elementtree" : [] , "methodName" : "setIdentifier, setType, addCoding, setUserSelected"} **/
						, specimendefinition.getSpcmnDfntnDntfrDntfrTpCcTxt() /** { "tree" :"SpecimenDefinition.identifier", "datatype" : "Identifier, CodeableConcept, string", "cardinality" : "ZeroOne", "elementtree" : [] , "methodName" : "setIdentifier, setType, setText"} **/
						, specimendefinition.getSpcmnDfntnDntfrDntfrPrdPrdStrt() /** { "tree" :"SpecimenDefinition.identifier", "datatype" : "Identifier, Period, dateTime", "cardinality" : "ZeroOne", "elementtree" : [] , "methodName" : "setIdentifier, setPeriod, setStart"} **/
						, specimendefinition.getSpcmnDfntnDntfrDntfrPrdPrdNd() /** { "tree" :"SpecimenDefinition.identifier", "datatype" : "Identifier, Period, dateTime", "cardinality" : "ZeroOne", "elementtree" : [] , "methodName" : "setIdentifier, setPeriod, setEnd"} **/
						, specimendefinition.getSpcmnDfntnDntfrDntfrSsgnr() /** { "tree" :"SpecimenDefinition.identifier", "datatype" : "Identifier, Reference", "cardinality" : "ZeroOne", "elementtree" : [] , "methodName" : "setIdentifier, setAssigner"} **/
						, specimendefinition.getSpcmnDfntnDntfrDntfrVlue() /** { "tree" :"SpecimenDefinition.identifier", "datatype" : "Identifier, string", "cardinality" : "ZeroOne", "elementtree" : [] , "methodName" : "setIdentifier, setValue"} **/
						, specimendefinition.getSpcmnDfntnDntfrDntfrSstm() /** { "tree" :"SpecimenDefinition.identifier", "datatype" : "Identifier, uri", "cardinality" : "ZeroOne", "elementtree" : [] , "methodName" : "setIdentifier, setSystem"} **/
						));
Specimendefinitionobj.setTypeCollected(HapiFHIRHelpers.createCodeableConcept(specimendefinition.getSpcmnDfntnTpCllctdCcCdngCSstm() /** { "tree" :"SpecimenDefinition.typeCollected", "datatype" : "CodeableConcept, Coding, uri", "cardinality" : "ZeroOne", "elementtree" : [] , "methodName" : "setTypeCollected, addCoding, setSystem"} **/
						, specimendefinition.getSpcmnDfntnTpCllctdCcCdngCVrsn() /** { "tree" :"SpecimenDefinition.typeCollected", "datatype" : "CodeableConcept, Coding, string", "cardinality" : "ZeroOne", "elementtree" : [] , "methodName" : "setTypeCollected, addCoding, setVersion"} **/
						, specimendefinition.getSpcmnDfntnTpCllctdCcCdngCCde() /** { "tree" :"SpecimenDefinition.typeCollected", "datatype" : "CodeableConcept, Coding, code", "cardinality" : "ZeroOne", "elementtree" : [] , "methodName" : "setTypeCollected, addCoding, setCode"} **/
						, specimendefinition.getSpcmnDfntnTpCllctdCcCdngCDsplay() /** { "tree" :"SpecimenDefinition.typeCollected", "datatype" : "CodeableConcept, Coding, string", "cardinality" : "ZeroOne", "elementtree" : [] , "methodName" : "setTypeCollected, addCoding, setDisplay"} **/
						, specimendefinition.getSpcmnDfntnTpCllctdCcCdngCSrSlctd() /** { "tree" :"SpecimenDefinition.typeCollected", "datatype" : "CodeableConcept, Coding, boolean", "cardinality" : "ZeroOne", "elementtree" : [] , "methodName" : "setTypeCollected, addCoding, setUserSelected"} **/
						, specimendefinition.getSpcmnDfntnTpCllctdCcTxt() /** { "tree" :"SpecimenDefinition.typeCollected", "datatype" : "CodeableConcept, string", "cardinality" : "ZeroOne", "elementtree" : [] , "methodName" : "setTypeCollected, setText"} **/
						));
Specimendefinitionobj.addPatientPreparation(HapiFHIRHelpers.createCodeableConcept(specimendefinition.getSpcmnDfntnPntPrprtnCcCdngCSstm() /** { "tree" :"SpecimenDefinition.patientPreparation", "datatype" : "CodeableConcept, Coding, uri", "cardinality" : "Many", "elementtree" : [] , "methodName" : "addPatientPreparation, addCoding, setSystem"} **/
						, specimendefinition.getSpcmnDfntnPntPrprtnCcCdngCVrsn() /** { "tree" :"SpecimenDefinition.patientPreparation", "datatype" : "CodeableConcept, Coding, string", "cardinality" : "Many", "elementtree" : [] , "methodName" : "addPatientPreparation, addCoding, setVersion"} **/
						, specimendefinition.getSpcmnDfntnPntPrprtnCcCdngCCde() /** { "tree" :"SpecimenDefinition.patientPreparation", "datatype" : "CodeableConcept, Coding, code", "cardinality" : "Many", "elementtree" : [] , "methodName" : "addPatientPreparation, addCoding, setCode"} **/
						, specimendefinition.getSpcmnDfntnPntPrprtnCcCdngCDsplay() /** { "tree" :"SpecimenDefinition.patientPreparation", "datatype" : "CodeableConcept, Coding, string", "cardinality" : "Many", "elementtree" : [] , "methodName" : "addPatientPreparation, addCoding, setDisplay"} **/
						, specimendefinition.getSpcmnDfntnPntPrprtnCcCdngCSrSlctd() /** { "tree" :"SpecimenDefinition.patientPreparation", "datatype" : "CodeableConcept, Coding, boolean", "cardinality" : "Many", "elementtree" : [] , "methodName" : "addPatientPreparation, addCoding, setUserSelected"} **/
						, specimendefinition.getSpcmnDfntnPntPrprtnCcTxt() /** { "tree" :"SpecimenDefinition.patientPreparation", "datatype" : "CodeableConcept, string", "cardinality" : "Many", "elementtree" : [] , "methodName" : "addPatientPreparation, setText"} **/
						));
Specimendefinitionobj.setTimeAspect(HapiFHIRHelpers.createstring(specimendefinition.getSpcmnDfntnTmspctStrng() /** { "tree" :"SpecimenDefinition.timeAspect", "datatype" : "string", "cardinality" : "ZeroOne", "elementtree" : [] , "methodName" : "setTimeAspect"} **/
						));
Specimendefinitionobj.addCollection(HapiFHIRHelpers.createCodeableConcept(specimendefinition.getSpcmnDfntnCllctnCcCdngCSstm() /** { "tree" :"SpecimenDefinition.collection", "datatype" : "CodeableConcept, Coding, uri", "cardinality" : "Many", "elementtree" : [] , "methodName" : "addCollection, addCoding, setSystem"} **/
						, specimendefinition.getSpcmnDfntnCllctnCcCdngCVrsn() /** { "tree" :"SpecimenDefinition.collection", "datatype" : "CodeableConcept, Coding, string", "cardinality" : "Many", "elementtree" : [] , "methodName" : "addCollection, addCoding, setVersion"} **/
						, specimendefinition.getSpcmnDfntnCllctnCcCdngCCde() /** { "tree" :"SpecimenDefinition.collection", "datatype" : "CodeableConcept, Coding, code", "cardinality" : "Many", "elementtree" : [] , "methodName" : "addCollection, addCoding, setCode"} **/
						, specimendefinition.getSpcmnDfntnCllctnCcCdngCDsplay() /** { "tree" :"SpecimenDefinition.collection", "datatype" : "CodeableConcept, Coding, string", "cardinality" : "Many", "elementtree" : [] , "methodName" : "addCollection, addCoding, setDisplay"} **/
						, specimendefinition.getSpcmnDfntnCllctnCcCdngCSrSlctd() /** { "tree" :"SpecimenDefinition.collection", "datatype" : "CodeableConcept, Coding, boolean", "cardinality" : "Many", "elementtree" : [] , "methodName" : "addCollection, addCoding, setUserSelected"} **/
						, specimendefinition.getSpcmnDfntnCllctnCcTxt() /** { "tree" :"SpecimenDefinition.collection", "datatype" : "CodeableConcept, string", "cardinality" : "Many", "elementtree" : [] , "methodName" : "addCollection, setText"} **/
						));
Specimendefinitionobj.setIsDerived(HapiFHIRHelpers.createboolean(specimendefinition.getSpcmnDfntnTpTstdSDrvdBln() /** { "tree" :"SpecimenDefinition.typeTested.isDerived", "datatype" : "boolean", "cardinality" : "ZeroOne", "elementtree" : ["addTypeTested"] , "methodName" : "setIsDerived"} **/
						));
Specimendefinitionobj.setType(HapiFHIRHelpers.createCodeableConcept(specimendefinition.getSpcmnDfntnTpTstdTpCcCdngCSstm() /** { "tree" :"SpecimenDefinition.typeTested.type", "datatype" : "CodeableConcept, Coding, uri", "cardinality" : "ZeroOne", "elementtree" : ["addTypeTested"] , "methodName" : "setType, addCoding, setSystem"} **/
						, specimendefinition.getSpcmnDfntnTpTstdTpCcCdngCVrsn() /** { "tree" :"SpecimenDefinition.typeTested.type", "datatype" : "CodeableConcept, Coding, string", "cardinality" : "ZeroOne", "elementtree" : ["addTypeTested"] , "methodName" : "setType, addCoding, setVersion"} **/
						, specimendefinition.getSpcmnDfntnTpTstdTpCcCdngCCde() /** { "tree" :"SpecimenDefinition.typeTested.type", "datatype" : "CodeableConcept, Coding, code", "cardinality" : "ZeroOne", "elementtree" : ["addTypeTested"] , "methodName" : "setType, addCoding, setCode"} **/
						, specimendefinition.getSpcmnDfntnTpTstdTpCcCdngCDsplay() /** { "tree" :"SpecimenDefinition.typeTested.type", "datatype" : "CodeableConcept, Coding, string", "cardinality" : "ZeroOne", "elementtree" : ["addTypeTested"] , "methodName" : "setType, addCoding, setDisplay"} **/
						, specimendefinition.getSpcmnDfntnTpTstdTpCcCdngCSrSlctd() /** { "tree" :"SpecimenDefinition.typeTested.type", "datatype" : "CodeableConcept, Coding, boolean", "cardinality" : "ZeroOne", "elementtree" : ["addTypeTested"] , "methodName" : "setType, addCoding, setUserSelected"} **/
						, specimendefinition.getSpcmnDfntnTpTstdTpCcTxt() /** { "tree" :"SpecimenDefinition.typeTested.type", "datatype" : "CodeableConcept, string", "cardinality" : "ZeroOne", "elementtree" : ["addTypeTested"] , "methodName" : "setType, setText"} **/
						));
Specimendefinitionobj.setPreference(HapiFHIRHelpers.createcode(specimendefinition.getSpcmnDfntnTpTstdPrfrncCde() /** { "tree" :"SpecimenDefinition.typeTested.preference", "datatype" : "code", "cardinality" : "Required", "elementtree" : ["addTypeTested"] , "methodName" : "setPreference"} **/
						));
Specimendefinitionobj.setMaterial(HapiFHIRHelpers.createCodeableConcept(specimendefinition.getSpcmnDfntnTpTstdCntnrMtrlCcCdngCSstm() /** { "tree" :"SpecimenDefinition.typeTested.container.material", "datatype" : "CodeableConcept, Coding, uri", "cardinality" : "ZeroOne", "elementtree" : ["addTypeTested", "setContainer"] , "methodName" : "setMaterial, addCoding, setSystem"} **/
						, specimendefinition.getSpcmnDfntnTpTstdCntnrMtrlCcCdngCVrsn() /** { "tree" :"SpecimenDefinition.typeTested.container.material", "datatype" : "CodeableConcept, Coding, string", "cardinality" : "ZeroOne", "elementtree" : ["addTypeTested", "setContainer"] , "methodName" : "setMaterial, addCoding, setVersion"} **/
						, specimendefinition.getSpcmnDfntnTpTstdCntnrMtrlCcCdngCCde() /** { "tree" :"SpecimenDefinition.typeTested.container.material", "datatype" : "CodeableConcept, Coding, code", "cardinality" : "ZeroOne", "elementtree" : ["addTypeTested", "setContainer"] , "methodName" : "setMaterial, addCoding, setCode"} **/
						, specimendefinition.getSpcmnDfntnTpTstdCntnrMtrlCcCdngCDsplay() /** { "tree" :"SpecimenDefinition.typeTested.container.material", "datatype" : "CodeableConcept, Coding, string", "cardinality" : "ZeroOne", "elementtree" : ["addTypeTested", "setContainer"] , "methodName" : "setMaterial, addCoding, setDisplay"} **/
						, specimendefinition.getSpcmnDfntnTpTstdCntnrMtrlCcCdngCSrSlctd() /** { "tree" :"SpecimenDefinition.typeTested.container.material", "datatype" : "CodeableConcept, Coding, boolean", "cardinality" : "ZeroOne", "elementtree" : ["addTypeTested", "setContainer"] , "methodName" : "setMaterial, addCoding, setUserSelected"} **/
						, specimendefinition.getSpcmnDfntnTpTstdCntnrMtrlCcTxt() /** { "tree" :"SpecimenDefinition.typeTested.container.material", "datatype" : "CodeableConcept, string", "cardinality" : "ZeroOne", "elementtree" : ["addTypeTested", "setContainer"] , "methodName" : "setMaterial, setText"} **/
						));
Specimendefinitionobj.setType(HapiFHIRHelpers.createCodeableConcept(specimendefinition.getSpcmnDfntnTpTstdCntnrTpCcCdngCSstm() /** { "tree" :"SpecimenDefinition.typeTested.container.type", "datatype" : "CodeableConcept, Coding, uri", "cardinality" : "ZeroOne", "elementtree" : ["addTypeTested", "setContainer"] , "methodName" : "setType, addCoding, setSystem"} **/
						, specimendefinition.getSpcmnDfntnTpTstdCntnrTpCcCdngCVrsn() /** { "tree" :"SpecimenDefinition.typeTested.container.type", "datatype" : "CodeableConcept, Coding, string", "cardinality" : "ZeroOne", "elementtree" : ["addTypeTested", "setContainer"] , "methodName" : "setType, addCoding, setVersion"} **/
						, specimendefinition.getSpcmnDfntnTpTstdCntnrTpCcCdngCCde() /** { "tree" :"SpecimenDefinition.typeTested.container.type", "datatype" : "CodeableConcept, Coding, code", "cardinality" : "ZeroOne", "elementtree" : ["addTypeTested", "setContainer"] , "methodName" : "setType, addCoding, setCode"} **/
						, specimendefinition.getSpcmnDfntnTpTstdCntnrTpCcCdngCDsplay() /** { "tree" :"SpecimenDefinition.typeTested.container.type", "datatype" : "CodeableConcept, Coding, string", "cardinality" : "ZeroOne", "elementtree" : ["addTypeTested", "setContainer"] , "methodName" : "setType, addCoding, setDisplay"} **/
						, specimendefinition.getSpcmnDfntnTpTstdCntnrTpCcCdngCSrSlctd() /** { "tree" :"SpecimenDefinition.typeTested.container.type", "datatype" : "CodeableConcept, Coding, boolean", "cardinality" : "ZeroOne", "elementtree" : ["addTypeTested", "setContainer"] , "methodName" : "setType, addCoding, setUserSelected"} **/
						, specimendefinition.getSpcmnDfntnTpTstdCntnrTpCcTxt() /** { "tree" :"SpecimenDefinition.typeTested.container.type", "datatype" : "CodeableConcept, string", "cardinality" : "ZeroOne", "elementtree" : ["addTypeTested", "setContainer"] , "methodName" : "setType, setText"} **/
						));
Specimendefinitionobj.setCap(HapiFHIRHelpers.createCodeableConcept(specimendefinition.getSpcmnDfntnTpTstdCntnrCpCcCdngCSstm() /** { "tree" :"SpecimenDefinition.typeTested.container.cap", "datatype" : "CodeableConcept, Coding, uri", "cardinality" : "ZeroOne", "elementtree" : ["addTypeTested", "setContainer"] , "methodName" : "setCap, addCoding, setSystem"} **/
						, specimendefinition.getSpcmnDfntnTpTstdCntnrCpCcCdngCVrsn() /** { "tree" :"SpecimenDefinition.typeTested.container.cap", "datatype" : "CodeableConcept, Coding, string", "cardinality" : "ZeroOne", "elementtree" : ["addTypeTested", "setContainer"] , "methodName" : "setCap, addCoding, setVersion"} **/
						, specimendefinition.getSpcmnDfntnTpTstdCntnrCpCcCdngCCde() /** { "tree" :"SpecimenDefinition.typeTested.container.cap", "datatype" : "CodeableConcept, Coding, code", "cardinality" : "ZeroOne", "elementtree" : ["addTypeTested", "setContainer"] , "methodName" : "setCap, addCoding, setCode"} **/
						, specimendefinition.getSpcmnDfntnTpTstdCntnrCpCcCdngCDsplay() /** { "tree" :"SpecimenDefinition.typeTested.container.cap", "datatype" : "CodeableConcept, Coding, string", "cardinality" : "ZeroOne", "elementtree" : ["addTypeTested", "setContainer"] , "methodName" : "setCap, addCoding, setDisplay"} **/
						, specimendefinition.getSpcmnDfntnTpTstdCntnrCpCcCdngCSrSlctd() /** { "tree" :"SpecimenDefinition.typeTested.container.cap", "datatype" : "CodeableConcept, Coding, boolean", "cardinality" : "ZeroOne", "elementtree" : ["addTypeTested", "setContainer"] , "methodName" : "setCap, addCoding, setUserSelected"} **/
						, specimendefinition.getSpcmnDfntnTpTstdCntnrCpCcTxt() /** { "tree" :"SpecimenDefinition.typeTested.container.cap", "datatype" : "CodeableConcept, string", "cardinality" : "ZeroOne", "elementtree" : ["addTypeTested", "setContainer"] , "methodName" : "setCap, setText"} **/
						));
Specimendefinitionobj.setDescription(HapiFHIRHelpers.createstring(specimendefinition.getSpcmnDfntnTpTstdCntnrDscrptnStrng() /** { "tree" :"SpecimenDefinition.typeTested.container.description", "datatype" : "string", "cardinality" : "ZeroOne", "elementtree" : ["addTypeTested", "setContainer"] , "methodName" : "setDescription"} **/
						));
Specimendefinitionobj.setCapacity(HapiFHIRHelpers.createSimpleQuantity(specimendefinition.getSpcmnDfntnTpTstdCntnrCpctSmplQntty() /** { "tree" :"SpecimenDefinition.typeTested.container.capacity", "datatype" : "SimpleQuantity", "cardinality" : "ZeroOne", "elementtree" : ["addTypeTested", "setContainer"] , "methodName" : "setCapacity"} **/
						));
Specimendefinitionobj.setMinimumVolumeSimplequantity(HapiFHIRHelpers.createSimpleQuantity(specimendefinition.getSpcmnDfntnTpTstdCntnrMnmmVlmSmplqnttSmplQntty() /** { "tree" :"SpecimenDefinition.typeTested.container.minimumVolumeSimplequantity", "datatype" : "SimpleQuantity", "cardinality" : "ZeroOne", "elementtree" : ["addTypeTested", "setContainer"] , "methodName" : "setMinimumVolumeSimplequantity"} **/
						));
Specimendefinitionobj.setMinimumVolumeString(HapiFHIRHelpers.createstring(specimendefinition.getSpcmnDfntnTpTstdCntnrMnmmVlmStrngStrng() /** { "tree" :"SpecimenDefinition.typeTested.container.minimumVolumeString", "datatype" : "string", "cardinality" : "ZeroOne", "elementtree" : ["addTypeTested", "setContainer"] , "methodName" : "setMinimumVolumeString"} **/
						));
Specimendefinitionobj.setAdditiveCodeableconcept(HapiFHIRHelpers.createCodeableConcept(specimendefinition.getSpcmnDfntnTpTstdCntnrDdtvDdtvCdblcncptCcCdngCSstm() /** { "tree" :"SpecimenDefinition.typeTested.container.additive.additiveCodeableconcept", "datatype" : "CodeableConcept, Coding, uri", "cardinality" : "Required", "elementtree" : ["addTypeTested", "setContainer", "addAdditive"] , "methodName" : "setAdditiveCodeableconcept, addCoding, setSystem"} **/
						, specimendefinition.getSpcmnDfntnTpTstdCntnrDdtvDdtvCdblcncptCcCdngCVrsn() /** { "tree" :"SpecimenDefinition.typeTested.container.additive.additiveCodeableconcept", "datatype" : "CodeableConcept, Coding, string", "cardinality" : "Required", "elementtree" : ["addTypeTested", "setContainer", "addAdditive"] , "methodName" : "setAdditiveCodeableconcept, addCoding, setVersion"} **/
						, specimendefinition.getSpcmnDfntnTpTstdCntnrDdtvDdtvCdblcncptCcCdngCCde() /** { "tree" :"SpecimenDefinition.typeTested.container.additive.additiveCodeableconcept", "datatype" : "CodeableConcept, Coding, code", "cardinality" : "Required", "elementtree" : ["addTypeTested", "setContainer", "addAdditive"] , "methodName" : "setAdditiveCodeableconcept, addCoding, setCode"} **/
						, specimendefinition.getSpcmnDfntnTpTstdCntnrDdtvDdtvCdblcncptCcCdngCDsplay() /** { "tree" :"SpecimenDefinition.typeTested.container.additive.additiveCodeableconcept", "datatype" : "CodeableConcept, Coding, string", "cardinality" : "Required", "elementtree" : ["addTypeTested", "setContainer", "addAdditive"] , "methodName" : "setAdditiveCodeableconcept, addCoding, setDisplay"} **/
						, specimendefinition.getSpcmnDfntnTpTstdCntnrDdtvDdtvCdblcncptCcCdngCSrSlctd() /** { "tree" :"SpecimenDefinition.typeTested.container.additive.additiveCodeableconcept", "datatype" : "CodeableConcept, Coding, boolean", "cardinality" : "Required", "elementtree" : ["addTypeTested", "setContainer", "addAdditive"] , "methodName" : "setAdditiveCodeableconcept, addCoding, setUserSelected"} **/
						, specimendefinition.getSpcmnDfntnTpTstdCntnrDdtvDdtvCdblcncptCcTxt() /** { "tree" :"SpecimenDefinition.typeTested.container.additive.additiveCodeableconcept", "datatype" : "CodeableConcept, string", "cardinality" : "Required", "elementtree" : ["addTypeTested", "setContainer", "addAdditive"] , "methodName" : "setAdditiveCodeableconcept, setText"} **/
						));
Specimendefinitionobj.setAdditiveReference(substance)(HapiFHIRHelpers.createReference(specimendefinition.getSpcmnDfntnTpTstdCntnrDdtvDdtvRfrncRfrnce() /** { "tree" :"SpecimenDefinition.typeTested.container.additive.additiveReference", "datatype" : "Reference", "cardinality" : "Required", "elementtree" : ["addTypeTested", "setContainer", "addAdditive"] , "methodName" : "setAdditiveReference(substance)"} **/
						));
Specimendefinitionobj.setPreparation(HapiFHIRHelpers.createstring(specimendefinition.getSpcmnDfntnTpTstdCntnrPrprtnStrng() /** { "tree" :"SpecimenDefinition.typeTested.container.preparation", "datatype" : "string", "cardinality" : "ZeroOne", "elementtree" : ["addTypeTested", "setContainer", "addAdditive"] , "methodName" : "setPreparation"} **/
						));
Specimendefinitionobj.setRequirement(HapiFHIRHelpers.createstring(specimendefinition.getSpcmnDfntnTpTstdRqrmntStrng() /** { "tree" :"SpecimenDefinition.typeTested.requirement", "datatype" : "string", "cardinality" : "ZeroOne", "elementtree" : ["addTypeTested", "setContainer", "addAdditive"] , "methodName" : "setRequirement"} **/
						));
Specimendefinitionobj.setRetentionTime(HapiFHIRHelpers.createDuration(specimendefinition.getSpcmnDfntnTpTstdRtntnTmDrtn() /** { "tree" :"SpecimenDefinition.typeTested.retentionTime", "datatype" : "Duration", "cardinality" : "ZeroOne", "elementtree" : ["addTypeTested", "setContainer", "addAdditive"] , "methodName" : "setRetentionTime"} **/
						));
Specimendefinitionobj.addRejectionCriterion(HapiFHIRHelpers.createCodeableConcept(specimendefinition.getSpcmnDfntnTpTstdRjctnCrtrnCcCdngCSstm() /** { "tree" :"SpecimenDefinition.typeTested.rejectionCriterion", "datatype" : "CodeableConcept, Coding, uri", "cardinality" : "Many", "elementtree" : ["addTypeTested", "setContainer", "addAdditive"] , "methodName" : "addRejectionCriterion, addCoding, setSystem"} **/
						, specimendefinition.getSpcmnDfntnTpTstdRjctnCrtrnCcCdngCVrsn() /** { "tree" :"SpecimenDefinition.typeTested.rejectionCriterion", "datatype" : "CodeableConcept, Coding, string", "cardinality" : "Many", "elementtree" : ["addTypeTested", "setContainer", "addAdditive"] , "methodName" : "addRejectionCriterion, addCoding, setVersion"} **/
						, specimendefinition.getSpcmnDfntnTpTstdRjctnCrtrnCcCdngCCde() /** { "tree" :"SpecimenDefinition.typeTested.rejectionCriterion", "datatype" : "CodeableConcept, Coding, code", "cardinality" : "Many", "elementtree" : ["addTypeTested", "setContainer", "addAdditive"] , "methodName" : "addRejectionCriterion, addCoding, setCode"} **/
						, specimendefinition.getSpcmnDfntnTpTstdRjctnCrtrnCcCdngCDsplay() /** { "tree" :"SpecimenDefinition.typeTested.rejectionCriterion", "datatype" : "CodeableConcept, Coding, string", "cardinality" : "Many", "elementtree" : ["addTypeTested", "setContainer", "addAdditive"] , "methodName" : "addRejectionCriterion, addCoding, setDisplay"} **/
						, specimendefinition.getSpcmnDfntnTpTstdRjctnCrtrnCcCdngCSrSlctd() /** { "tree" :"SpecimenDefinition.typeTested.rejectionCriterion", "datatype" : "CodeableConcept, Coding, boolean", "cardinality" : "Many", "elementtree" : ["addTypeTested", "setContainer", "addAdditive"] , "methodName" : "addRejectionCriterion, addCoding, setUserSelected"} **/
						, specimendefinition.getSpcmnDfntnTpTstdRjctnCrtrnCcTxt() /** { "tree" :"SpecimenDefinition.typeTested.rejectionCriterion", "datatype" : "CodeableConcept, string", "cardinality" : "Many", "elementtree" : ["addTypeTested", "setContainer", "addAdditive"] , "methodName" : "addRejectionCriterion, setText"} **/
						));
Specimendefinitionobj.setTemperatureQualifier(HapiFHIRHelpers.createCodeableConcept(specimendefinition.getSpcmnDfntnTpTstdHndlngTmprtrQlfrCcCdngCSstm() /** { "tree" :"SpecimenDefinition.typeTested.handling.temperatureQualifier", "datatype" : "CodeableConcept, Coding, uri", "cardinality" : "ZeroOne", "elementtree" : ["addTypeTested", "setContainer", "addAdditive", "addHandling"] , "methodName" : "setTemperatureQualifier, addCoding, setSystem"} **/
						, specimendefinition.getSpcmnDfntnTpTstdHndlngTmprtrQlfrCcCdngCVrsn() /** { "tree" :"SpecimenDefinition.typeTested.handling.temperatureQualifier", "datatype" : "CodeableConcept, Coding, string", "cardinality" : "ZeroOne", "elementtree" : ["addTypeTested", "setContainer", "addAdditive", "addHandling"] , "methodName" : "setTemperatureQualifier, addCoding, setVersion"} **/
						, specimendefinition.getSpcmnDfntnTpTstdHndlngTmprtrQlfrCcCdngCCde() /** { "tree" :"SpecimenDefinition.typeTested.handling.temperatureQualifier", "datatype" : "CodeableConcept, Coding, code", "cardinality" : "ZeroOne", "elementtree" : ["addTypeTested", "setContainer", "addAdditive", "addHandling"] , "methodName" : "setTemperatureQualifier, addCoding, setCode"} **/
						, specimendefinition.getSpcmnDfntnTpTstdHndlngTmprtrQlfrCcCdngCDsplay() /** { "tree" :"SpecimenDefinition.typeTested.handling.temperatureQualifier", "datatype" : "CodeableConcept, Coding, string", "cardinality" : "ZeroOne", "elementtree" : ["addTypeTested", "setContainer", "addAdditive", "addHandling"] , "methodName" : "setTemperatureQualifier, addCoding, setDisplay"} **/
						, specimendefinition.getSpcmnDfntnTpTstdHndlngTmprtrQlfrCcCdngCSrSlctd() /** { "tree" :"SpecimenDefinition.typeTested.handling.temperatureQualifier", "datatype" : "CodeableConcept, Coding, boolean", "cardinality" : "ZeroOne", "elementtree" : ["addTypeTested", "setContainer", "addAdditive", "addHandling"] , "methodName" : "setTemperatureQualifier, addCoding, setUserSelected"} **/
						, specimendefinition.getSpcmnDfntnTpTstdHndlngTmprtrQlfrCcTxt() /** { "tree" :"SpecimenDefinition.typeTested.handling.temperatureQualifier", "datatype" : "CodeableConcept, string", "cardinality" : "ZeroOne", "elementtree" : ["addTypeTested", "setContainer", "addAdditive", "addHandling"] , "methodName" : "setTemperatureQualifier, setText"} **/
						));
Specimendefinitionobj.setTemperatureRange(HapiFHIRHelpers.createRange(specimendefinition.getSpcmnDfntnTpTstdHndlngTmprtrRngRngLw() /** { "tree" :"SpecimenDefinition.typeTested.handling.temperatureRange", "datatype" : "Range, SimpleQuantity", "cardinality" : "ZeroOne", "elementtree" : ["addTypeTested", "setContainer", "addAdditive", "addHandling"] , "methodName" : "setTemperatureRange, setLow"} **/
						, specimendefinition.getSpcmnDfntnTpTstdHndlngTmprtrRngRngHgh() /** { "tree" :"SpecimenDefinition.typeTested.handling.temperatureRange", "datatype" : "Range, SimpleQuantity", "cardinality" : "ZeroOne", "elementtree" : ["addTypeTested", "setContainer", "addAdditive", "addHandling"] , "methodName" : "setTemperatureRange, setHigh"} **/
						));
Specimendefinitionobj.setMaxDuration(HapiFHIRHelpers.createDuration(specimendefinition.getSpcmnDfntnTpTstdHndlngMxDrtnDrtn() /** { "tree" :"SpecimenDefinition.typeTested.handling.maxDuration", "datatype" : "Duration", "cardinality" : "ZeroOne", "elementtree" : ["addTypeTested", "setContainer", "addAdditive", "addHandling"] , "methodName" : "setMaxDuration"} **/
						));
Specimendefinitionobj.setInstruction(HapiFHIRHelpers.createstring(specimendefinition.getSpcmnDfntnTpTstdHndlngNstrctnStrng() /** { "tree" :"SpecimenDefinition.typeTested.handling.instruction", "datatype" : "string", "cardinality" : "ZeroOne", "elementtree" : ["addTypeTested", "setContainer", "addAdditive", "addHandling"] , "methodName" : "setInstruction"} **/
		));
	}
}
